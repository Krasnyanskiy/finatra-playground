  //  def findById(id: Long)(implicit session: DBSession = Customer.autoSession) = {
  //
  //    //val db = DB(ConnectionPool.borrow())
  //    //val session = db.autoCommitSession
  //
  //    //session.single("select * from Customers where id = ?", id) { rs => Customer(rs.int("id"), rs.string("firstname"), rs.string("lastname")) }
  //    //session.close()
  //
  //    DBs.setup()
  //    DB.readOnly {
  //      session => sql"SELECT id, firstname, lastname FROM Customers WHERE id = $id"
  //        .map(
  //          rs => Customer(
  //            rs.int("id"),
  //            rs.string("firstname"),
  //            rs.string("lastname")
  //          )
  //        ).single.apply()
  //    }
  //    DBs.close()
  //  }

  //implicit val session = AutoSession
  //val settings = ConnectionPoolSettings(initialSize = 5, maxSize = 20, connectionTimeoutMillis = 3000L, validationQuery = "select 1 from dual")
  //ConnectionPool.add("foo", "jdbc:postgresql://localhost:5432/jasperserver", "postgres", "postgres", settings)

  //  def findById(id: Long)(implicit session: DBSession) = {
  //    sql"SELECT id, firstname, lastname FROM Customers WHERE id = ${id}"
  //      .map(
  //        rs => Customer(
  //          rs.int("id"),
  //          rs.string("firstname"),
  //          rs.string("lastname")
  //        )
  //      ).single.apply()
  //  }


  //  def findCustomerById(id: Long) = {
  //    DB readOnly { implicit session =>
  //      sql"SELECT id, firstname, lastname FROM Customers WHERE id = ${id}".map(a => a).single.apply()
  //    }
  //  }


  //  def getCustomer(id: Long): Option[Customer] = {
  //    using(ConnectionPool.borrow()) {
  //      conn => {
  //        DB(conn).readOnly {
  //          session => {
  //            SQL("select * from Customers where id = ${id}").map { rs => Customer(rs.int("id"), rs.string("firstname"), rs.string("lastname")) }.single.apply()
  //          }
  //        }
  //      }
  //    }
  //  }





  //val poolSettings = new ConnectionPoolSettings(initialSize = 100, maxSize = 100)
  //ConnectionPool.singleton("jdbc:postgresql://localhost:5432/jasperserver", "postgres", "postgres", poolSettings)
